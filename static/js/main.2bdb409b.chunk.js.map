{"version":3,"sources":["components/JreNav.js","components/JreSearch.js","App.js","serviceWorker.js","index.js","logo.svg","imgs/jre.png"],"names":["JreNav","bg","Brand","href","alt","src","jreLogo","width","height","className","Link","React","Component","JreSearch","SearchBar","Search","keyField","data","jreData","videos","columns","dataField","text","sort","search","props","searchProps","baseProps","App","logo","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"kRA8BeA,E,iLAtBX,OACE,kBAAC,IAAD,CAAQC,GAAG,SACT,kBAAC,IAAOC,MAAR,CAAcC,KAAK,SACjB,yBACEC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPC,UAAU,6BAEZ,0BAAMA,UAAU,MAAhB,QAEF,kBAAC,IAAD,CAAKA,UAAU,WACb,kBAAC,IAAIC,KAAL,CAAUP,KAAK,SAAf,UACA,kBAAC,IAAIO,KAAL,CAAUP,KAAK,cAAf,aACA,kBAAC,IAAIO,KAAL,CAAUP,KAAK,UAAf,e,GAlBWQ,IAAMC,W,0CCoDZC,E,iLAhDH,IACAC,EAAcC,SAAdD,UAwBR,OACE,kBAAC,IAAD,CACEE,SAAS,UACTC,KAAOC,EAAQC,OACfC,QA3BY,CACd,CACEC,UAAW,OACXC,KAAM,OACNC,MAAM,GACL,CACDF,UAAW,gBACXC,KAAM,kBACL,CACDD,UAAW,QACXC,KAAM,SACL,CACDD,UAAW,WACXC,KAAM,YACL,CACDD,UAAW,iBACXC,KAAM,cACL,CACDD,UAAW,WACXC,KAAM,aASNE,QAAM,IAGJ,SAAAC,GAAK,OACH,6BACE,kBAACX,EAAeW,EAAMC,aACtB,6BACA,kBAAC,IACMD,EAAME,mB,GAvCHhB,IAAMC,WCsBfgB,MAxBf,WACE,OAEE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,yBAAKJ,IAAKwB,IAAMpB,UAAU,WAAWL,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEK,UAAU,WACVN,KAAK,sBACL2B,OAAO,SACPC,IAAI,uBAJN,kBCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.2bdb409b.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport jreLogo from '../imgs/jre.png'\n\nclass JreNav extends React.Component {\n\n  render() {\n    return (\n      <Navbar bg=\"light\" >\n        <Navbar.Brand href=\"#home\">\n          <img\n            alt=\"\"\n            src={jreLogo}\n            width=\"50\"\n            height=\"50\"\n            className=\"d-inline-block align-top\"\n          />\n          <span className=\"h1\">JRE</span>\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Search</Nav.Link>\n          <Nav.Link href=\"#analytics\">Analytics</Nav.Link>\n          <Nav.Link href=\"#about\">About</Nav.Link>\n        </Nav>\n      </Navbar>\n    );\n  }\n}\n\nexport default JreNav;\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport jreData from '../data/Uploads from PowerfulJRE_2019-09-13.json'\n\n// TODO: Show count (number of videos returned in search)\n// TODO: Sort by date\n// TODO: Sort by view count\nclass JreSearch extends React.Component {\n  render() {\n    const { SearchBar } = Search;\n    const columns = [\n      {\n        dataField: 'name',\n        text: 'Name',\n        sort: true,\n      }, {\n        dataField: 'datePublished',\n        text: 'Date Published',\n      }, {\n        dataField: 'genre',\n        text: 'Genre',\n      }, {\n        dataField: 'keywords',\n        text: 'Keywords',\n      }, {\n        dataField: 'watchViewCount',\n        text: 'View Count',\n      }, {\n        dataField: 'duration',\n        text: 'Duration',\n      },\n    ];\n    \n    return (\n      <ToolkitProvider\n        keyField=\"videoId\"\n        data={ jreData.videos }\n        columns={ columns }\n        search\n      >\n        {\n          props => (\n            <div>\n              <SearchBar { ...props.searchProps } />\n              <hr />\n              <BootstrapTable\n                { ...props.baseProps }\n              />\n            </div>\n          )\n        }\n      </ToolkitProvider>\n    );\n  }\n}\n\nexport default JreSearch;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport JreNav from './components/JreNav';\nimport JreSearch from './components/JreSearch';\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n      <JreNav />\n      <JreSearch />\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/jre.b8b8a1ef.png\";"],"sourceRoot":""}