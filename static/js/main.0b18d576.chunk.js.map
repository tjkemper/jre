{"version":3,"sources":["imgs/jre.png","components/JreNav.js","components/JreLoading.js","components/JreLoadable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","JreNav","bg","Brand","to","className","alt","src","logo","width","height","Link","React","Component","JreLoading","animation","variant","JreLoadable","opts","L","loading","delay","App","Analytics","loader","Search","Random","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,iC,kSCkC5BC,G,6KAxBX,OACE,kBAAC,IAAD,CAAQC,GAAG,SACT,kBAAC,IAAOC,MAAR,KACE,kBAAC,IAAD,CAAMC,GAAG,IAAIC,UAAU,WACrB,yBACEC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPL,UAAU,kCAEZ,0BAAMA,UAAU,MAAhB,SAGJ,kBAAC,IAAD,CAAKA,UAAU,WACb,kBAAC,IAAIM,KAAL,KAAU,kBAAC,IAAD,CAAMP,GAAG,IAAIC,UAAU,WAAvB,cACV,kBAAC,IAAIM,KAAL,KAAU,kBAAC,IAAD,CAAMP,GAAG,WAAWC,UAAU,WAA9B,WACV,kBAAC,IAAIM,KAAL,KAAU,kBAAC,IAAD,CAAMP,GAAG,WAAWC,UAAU,WAA9B,iB,GApBCO,IAAMC,Y,0CCQZC,E,uKATX,OACE,6BACE,wCACA,kBAAC,IAAD,CAASC,UAAU,SAASC,QAAQ,c,GANnBJ,IAAMC,WCOhBI,EAPK,SAAAC,GAAI,OACtBC,IAAE,aACAC,QAASN,EACTO,MAAO,KACJH,KC2BQI,E,uKAzBX,IAAMC,EAAYN,EAAY,CAC5BO,OAAQ,kBAAM,qEAEVC,EAASR,EAAY,CACzBO,OAAQ,kBAAM,qEAEVE,EAAST,EAAY,CACzBO,OAAQ,kBAAM,8DAGhB,OACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,CAAQsB,SAAS,OACf,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,WAAWC,UAAWL,IAClC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,WAAWC,UAAWJ,W,GApBlCd,IAAMC,WCMJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0b18d576.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jre.b8b8a1ef.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport logo from '../imgs/jre.png';\r\nimport './JreNav.css';\r\n\r\nclass JreNav extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"light\" >\r\n        <Navbar.Brand>\r\n          <Link to=\"/\" className=\"nostyle\">\r\n            <img\r\n              alt=\"\"\r\n              src={logo}\r\n              width=\"50\"\r\n              height=\"50\"\r\n              className=\"d-inline-block align-top logo\"\r\n            />\r\n            <span className=\"h1\">JRE</span>\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link><Link to=\"/\" className=\"nostyle\">Analytics</Link></Nav.Link>\r\n          <Nav.Link><Link to=\"/search/\" className=\"nostyle\">Search</Link></Nav.Link>\r\n          <Nav.Link><Link to=\"/random/\" className=\"nostyle\">Random</Link></Nav.Link>\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JreNav;\r\n","import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nclass JreLoading extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>Loading</div>\r\n        <Spinner animation=\"border\" variant=\"dark\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JreLoading;\r\n","import L from 'react-loadable';\r\nimport JreLoading from './JreLoading';\r\n\r\nconst JreLoadable = opts =>\r\n  L({\r\n    loading: JreLoading,\r\n    delay: 300,\r\n    ...opts\r\n  });\r\n\r\nexport default JreLoadable;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport JreNav from './components/JreNav';\r\nimport JreLoadable from './components/JreLoadable';\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    const Analytics = JreLoadable({\r\n      loader: () => import('./components/analytics/JreAnalytics'),\r\n    });\r\n    const Search = JreLoadable({\r\n      loader: () => import('./components/JreSearch'),\r\n    });\r\n    const Random = JreLoadable({\r\n      loader: () => import('./components/JreRandom'),\r\n    });\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Router basename=\"jre\">\r\n          <JreNav />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Analytics} />\r\n            <Route path=\"/search/\" component={Search} />\r\n            <Route exact path=\"/random/\" component={Random} />\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Importing the Bootstrap CSS\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}