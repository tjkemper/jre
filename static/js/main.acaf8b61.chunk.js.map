{"version":3,"sources":["imgs/jre.png","components/JreNav.js","components/JreLoading.js","components/JreLoadable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","JreNav","bg","Brand","to","className","alt","src","logo","width","height","Link","React","Component","JreLoading","animation","variant","JreLoadable","opts","L","loading","delay","App","Random","loader","Search","Analytics","About","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,iC,0SCmC5BC,G,uLAzBX,OACE,kBAAC,IAAD,CAAQC,GAAG,SACT,kBAAC,IAAOC,MAAR,KACE,kBAAC,IAAD,CAAMC,GAAG,IAAIC,UAAU,WACrB,yBACEC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPL,UAAU,kCAEZ,0BAAMA,UAAU,MAAhB,SAGJ,kBAAC,IAAD,CAAKA,UAAU,WACb,kBAAC,IAAIM,KAAL,KAAU,kBAAC,IAAD,CAAMP,GAAG,IAAIC,UAAU,WAAvB,WACV,kBAAC,IAAIM,KAAL,KAAU,kBAAC,IAAD,CAAMP,GAAG,WAAWC,UAAU,WAA9B,WACV,kBAAC,IAAIM,KAAL,KAAU,kBAAC,IAAD,CAAMP,GAAG,cAAcC,UAAU,WAAjC,cACV,kBAAC,IAAIM,KAAL,KAAU,kBAAC,IAAD,CAAMP,GAAG,UAAUC,UAAU,WAA7B,gB,GArBCO,IAAMC,Y,0CCQZC,E,iLATX,OACE,6BACE,wCACA,kBAAC,IAAD,CAASC,UAAU,SAASC,QAAQ,c,GANnBJ,IAAMC,W,8NCA/B,IAOeI,EAPK,SAAAC,GAAI,OACtBC,I,yVAAE,CAAD,CACCC,QAASN,EACTO,MAAO,KACJH,KC+BQI,E,iLA7BX,IAAMC,EAASN,EAAY,CACzBO,OAAQ,kBAAM,8DAEVC,EAASR,EAAY,CACzBO,OAAQ,kBAAM,sEAEVE,EAAYT,EAAY,CAC5BO,OAAQ,kBAAM,qEAEVG,EAAQV,EAAY,CACxBO,OAAQ,kBAAM,iCAGhB,OACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,CAAQuB,SAAS,OACf,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWN,IAClC,kBAAC,IAAD,CAAOK,KAAK,cAAcC,UAAWL,IACrC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,UAAWJ,W,GAxB3Bf,IAAMC,WCMJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.acaf8b61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jre.b8b8a1ef.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport logo from '../imgs/jre.png';\nimport './JreNav.css';\n\nclass JreNav extends React.Component {\n\n  render() {\n    return (\n      <Navbar bg=\"light\" >\n        <Navbar.Brand>\n          <Link to=\"/\" className=\"nostyle\">\n            <img\n              alt=\"\"\n              src={logo}\n              width=\"50\"\n              height=\"50\"\n              className=\"d-inline-block align-top logo\"\n            />\n            <span className=\"h1\">JRE</span>\n          </Link>\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link><Link to=\"/\" className=\"nostyle\">Random</Link></Nav.Link>\n          <Nav.Link><Link to=\"/search/\" className=\"nostyle\">Search</Link></Nav.Link>\n          <Nav.Link><Link to=\"/analytics/\" className=\"nostyle\">Analytics</Link></Nav.Link>\n          <Nav.Link><Link to=\"/about/\" className=\"nostyle\">About</Link></Nav.Link>      \n        </Nav>\n      </Navbar>\n    );\n  }\n}\n\nexport default JreNav;\n","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner'\n\nclass JreLoading extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <div>Loading</div>\n        <Spinner animation=\"border\" variant=\"dark\" />\n      </div>\n    );\n  }\n}\n\nexport default JreLoading;\n","import L from 'react-loadable';\nimport JreLoading from './JreLoading';\n\nconst JreLoadable = opts =>\n  L({\n    loading: JreLoading,\n    delay: 300,\n    ...opts\n  });\n\nexport default JreLoadable;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport JreNav from './components/JreNav';\nimport JreLoadable from './components/JreLoadable';\n\nclass App extends React.Component {\n\n  render() {\n    const Random = JreLoadable({\n      loader: () => import('./components/JreRandom'),\n    });\n    const Search = JreLoadable({\n      loader: () => import('./components/JreSearch'),\n    });\n    const Analytics = JreLoadable({\n      loader: () => import('./components/analytics/JreAnalytics'),\n    });\n    const About = JreLoadable({\n      loader: () => import('./components/JreAbout'),\n    });\n\n    return (\n      <div className=\"App\">\n        <Router basename=\"jre\">\n          <JreNav />\n          <Switch>\n            <Route exact path=\"/\" component={Random} />\n            <Route path=\"/search/\" component={Search} />\n            <Route path=\"/analytics/\" component={Analytics} />\n            <Route path=\"/about/\" component={About} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}